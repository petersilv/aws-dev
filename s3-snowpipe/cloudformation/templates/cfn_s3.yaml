AWSTemplateFormatVersion: 2010-09-09
Description: ---

Metadata: # ------------------------------------------------------------------------------------------------------------
  
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: 
          default: S3
        Parameters: 
          - S3BucketName
      - Label: 
          default: Snowflake Integration
        Parameters: 
          - SnowflakeIntegrationCreated
          - SnowflakeUserARN
          - SnowflakeExternalID
      - Label: 
          default: Snowflake SnowPipe
        Parameters: 
          - SnowflakeSnowPipeCreated
          - SnowflakeSnowpipeQueueARN

Parameters: # ----------------------------------------------------------------------------------------------------------

  S3BucketName:
    Description: >-
      The name of the S3 bucket that you will create to store data for Snowflake 
    Type: String

  SnowflakeIntegrationCreated:
    Description: >-
      Select True when you have created the S3 integration in Snowflake, this
      should be False when you first create the stack
    Type: String
    AllowedValues:
      - "True"
      - "False"

  SnowflakeSnowPipeCreated:
    Description: >-
      Select True when you have created the S3 integration in Snowflake, this
      should be False when you first create the stack
    Type: String
    AllowedValues:
      - "True"
      - "False"

  SnowflakeUserARN:
    Description: >-
      The STORAGE_AWS_IAM_USER_ARN value you copied from Snowflake.
      Leave blank if you haven't completed the Snowflake steps
    Type: String
 
  SnowflakeExternalID:
    Description: >-
      The STORAGE_AWS_EXTERNAL_ID value you copied from Snowflake.
      Leave blank if you haven't completed the Snowflake steps
    Type: String

  SnowflakeSnowpipeQueueARN:
    Description: >-
      The Snowpipe NOTIFICATION_CHANNEL value you copied from Snowflake.
      Leave blank if you haven't completed the Snowflake steps
    Type: String

Conditions:  # ---------------------------------------------------------------------------------------------------------
  
  SnowflakeIntegrationNotCreatedCondition:
    !Equals
      - !Ref SnowflakeIntegrationCreated
      - "False"
  SnowflakeSnowPipeNotCreatedCondition:
    !Equals
      - !Ref SnowflakeSnowPipeCreated
      - "False"

Resources: # -----------------------------------------------------------------------------------------------------------

  s3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties: 
      BucketName: !Ref S3BucketName
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      LifecycleConfiguration:
        Rules:
          - Id: delete-after-30-days
            Status: Enabled
            ExpirationInDays: 30
      NotificationConfiguration:
        !If
          - SnowflakeSnowPipeNotCreatedCondition
          - !Ref AWS::NoValue
          - QueueConfigurations:
            - Event: 's3:ObjectCreated:*'
              Queue: !Ref SnowflakeSnowpipeQueueARN

  lambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: snowflake-lambda-function-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SnowflakeS3BucketAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: 'Allow'
                  Action: 's3:ListBucket'
                  Resource: !GetAtt s3Bucket.Arn
                - Effect: 'Allow'
                  Action: 
                    - 's3:PutObject'
                    - 's3:GetObject'
                    - 's3:GetObjectVersion'
                    - 's3:DeleteObject'
                    - 's3:DeleteObjectVersion'
                  Resource: !Sub
                    - ${ARN}/*
                    - { ARN: !GetAtt s3Bucket.Arn }

  tempIamUser:
    Type: AWS::IAM::User
    Condition: SnowflakeIntegrationNotCreatedCondition
    Properties:
      UserName: snowflake-user-temp

  snowflakeIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: snowflake-role
      Policies:
        - PolicyName: SnowflakeS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: 'Allow'
                Action: 's3:ListBucket'
                Resource: !GetAtt s3Bucket.Arn
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                Resource: !Sub
                  - ${ARN}/*
                  - { ARN: !GetAtt s3Bucket.Arn}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              AWS:
                - !If
                  - SnowflakeIntegrationNotCreatedCondition
                  - !GetAtt tempIamUser.Arn
                  - !Ref SnowflakeUserARN
            Condition:
              StringEquals:
                sts:ExternalId: !Ref SnowflakeExternalID

Outputs: # -------------------------------------------------------------------------------------------------------------

  snowflakeS3Name:
    Description: The name of the S3 bucket created for Snowflake data
    Value: !Ref s3Bucket
    Export:
      Name: snowflakeS3Name

  snowflakeS3Arn:
    Description: The ARN of the S3 bucket created for Snowflake data
    Value: !GetAtt s3Bucket.Arn
    Export:
      Name: snowflakeS3Arn

  snowflakeIamRoleArn:
    Description: The ARN of the IAM Role created for Snowflake to access S3
    Value: !GetAtt snowflakeIamRole.Arn
    Export:
      Name: snowflakeIamRoleArn

  snowflakeLambdaIamRoleArn:
    Description: >-
      The ARN of the IAM Role created for Lambda to access the Snowflake 
      data S3 bucket
    Value: !GetAtt lambdaIamRole.Arn
    Export:
      Name: snowflakeLambdaIamRoleArn
